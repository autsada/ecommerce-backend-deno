// 1. Create extension
CREATE EXTENSION "uuid-ossp";

// 2. Create tables --> users, addresses, products, carts, cart_items, orders, order_items

CREATE TABLE IF NOT EXISTS users (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
username TEXT NOT NULL,
email TEXT NOT NULL UNIQUE,
password TEXT NOT NULL,
role TEXT NOT NULL DEFAULT 'CLIENT',
stripe_id TEXT,
reset_password_token TEXT,
reset_password_token_expiry BIGINT CHECK (reset_password_token_expiry >= 0),
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS addresses (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
fullname TEXT NOT NULL,
address1 TEXT NOT NULL,
address2 TEXT,
city TEXT NOT NULL,
zip_code TEXT NOT NULL,
phone TEXT NOT NULL,
owner_id uuid NOT NULL,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS products (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
title TEXT NOT NULL,
description TEXT NOT NULL,
price INT NOT NULL CHECK (price >= 0),
image_url TEXT NOT NULL,
image_file_name TEXT NOT NULL,
image_public_id TEXT NOT NULL,
category TEXT NOT NULL,
inventory INT NOT NULL CHECK (inventory >= 0),
creator uuid NOT NULL,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS carts (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
owner_id uuid NOT NULL,
payment_intent TEXT,
address_id uuid,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE,
FOREIGN KEY (address_id) REFERENCES addresses (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS cart_items (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
quantity INT NOT NULL,
product_id uuid NOT NULL,
cart_id uuid NOT NULL,
owner_id uuid NOT NULL,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (cart_id) REFERENCES carts (id) ON DELETE CASCADE,
FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE,
FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS orders (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
quantity INT NOT NULL,
amount INT NOT NULL,
payment TEXT NOT NULL,
payment_status TEXT NOT NULL,
shipment_status TEXT NOT NULL DEFAULT 'New',
shipping_address JSONB NOT NULL,
owner_id uuid NOT NULL,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS order_items (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
quantity INT NOT NULL,
product_id uuid NOT NULL,
title TEXT NOT NULL,
description TEXT NOT NULL,
price INT NOT NULL,
image_url TEXT NOT NULL,
category TEXT NOT NULL,
order_id uuid NOT NULL,
owner_id uuid NOT NULL,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS sessions (
id uuid PRIMARY KEY DEFAULT uuid_generate_v4 (),
owner_id uuid NOT NULL,
created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (owner_id) REFERENCES users (id) ON DELETE CASCADE
);

// 3. Automatically set updated_at timestamp when update

CREATE OR REPLACE FUNCTION auto_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

// 4. Call function to trigger updated_at on each table

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON addresses
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON products
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON carts
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON cart_items
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON orders
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON order_items
FOR EACH ROW
EXECUTE PROCEDURE auto_set_timestamp();
